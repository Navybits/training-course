installation:
expo install expo-image-picker expo-constants expo-permissions




Image picker file:

import * as React from "react";
import { Button, Image, View } from "react-native";
import * as ImagePicker from 'expo-image-picker'
import Constants from "expo-constants";
import * as Permissions from "expo-permissions";
export default class ImagePickerExample extends React.Component {
  state = {
    image: null
  };

  render() {
    let { image } = this.state;

    return (
      <View style={{ alignItems: "center", justifyContent: "center" }}>
        <Button
          title="Pick an image from camera roll"
          onPress={this._pickImage}
        />
        {image && (
          <Image source={{ uri: image }} style={{ width: 200, height: 200 }} />
        )}
      </View>
    );
  }

  componentDidMount() {
    this.getPermissionAsync();
  }

  getPermissionAsync = async () => {
    if (Constants.platform.ios) {
      const { status } = await Permissions.askAsync(Permissions.CAMERA_ROLL);
      if (status !== "granted") {
        alert("Sorry, we need camera roll permissions to make this work!");
      }

      const { status : _status } = await Permissions.askAsync(Permissions.CAMERA);
      if (_status !== "granted") {
        alert("Sorry, we need camera permissions to make this work!");
      }
    }
  };

  _pickImage = async () => {
    let result = await ImagePicker.launchCameraAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.All,
      allowsEditing: true,
      aspect: [4, 3]
    });

    // console.log(result);

    if (!result.cancelled) {
      this.setState({ image: result.uri });
      this.props.onSelect(result.uri);
    }
  };
}


-------------
Signup screen 

import React from "react";
import { View, Button, Text } from "react-native";
import { connect } from "react-redux";
import * as userActions from "../redux/actions/userData";
import styles from "../styles";
// import TextInput from "../components/TextInput";
import { TextInput } from "react-native-paper";
import ImagePickerExample from "../components/imagePicker";
class SignInScreen extends React.Component {
  static navigationOptions = {
    title: "Please sign in"
  };
  state = {
    name: ""
  };
  componentWillReceiveProps(nextProps) {
    let newUserData = nextProps.userData,
      oldUserData = this.props.userData;
    if (newUserData && newUserData.name) {
      this.props.navigation.navigate("App");
    }
  }
  componentDidMount() {
    let oldUserData = this.props.userData;
    if (oldUserData && oldUserData.name) {
      this.props.navigation.navigate("App");
    }
  }
  render() {
    return (
      <View style={styles.container}>
        <ImagePickerExample onSelect={uri => this.setState({ uri })} />
        <TextInput
          label="Name"
          mode="outlined"
          style={styles.textInput}
          value={this.state.name}
          onChangeText={text => {
            this.setState({ name: text });
          }}
        />
        <TextInput
          label="Email"
          mode="outlined"
          style={styles.textInput}
          value={this.state.email}
          onChangeText={text => {
            this.setState({ email: text });
          }}
          keyboardType="email-address"
        />
        <TextInput
          label="Password"
          mode="outlined"
          secureTextEntry={true}
          style={styles.textInput}
          value={this.state.password}
          onChangeText={text => {
            this.setState({ password: text });
          }}
        />
        <Text>{this.props.userData.name}</Text>
        <Button title="Sign in!" onPress={this._signInAsync} />
      </View>
    );
  }

  _signInAsync = async () => {
    console.log("calling dispatch action", this.state);
    // await AsyncStorage.setItem("userToken", "abc");
    // this.props.navigation.navigate("App");
    this.props.setUserDataInRedux(this.state);
  };
}

const mapStateToProps = state => {
  return {
    userData: state.userData
  };
};

const mapDispatchToProps = dispatch => {
  return {
    setUserDataInRedux: data => {
      console.log("inside setUserDataInRedux");
      dispatch(userActions.set_user_data(data));
    }
  };
};

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(SignInScreen);

----------------
styles

import { StyleSheet } from "react-native";
export default StyleSheet.create({
  container: {
    padding: 10,
    flex: 1,
    width: "100%",
    alignItems: "center",
    justifyContent: "center",
  },
  textInput: {
    width:"100%",
    marginBottom: 5,
  }
});


---------------
Profile screen



import React from "react";
import { View, Button, Text, Image } from "react-native";
import { connect } from "react-redux";
import styles from "../styles";
import TextInput from "../components/TextInput";
import * as userActions from "../redux/actions/userData";

class HomeScreen extends React.Component {
  static navigationOptions = {
    title: "Welcome to the app!"
  };
  componentWillReceiveProps(nextProps) {
    let newUserData = nextProps.userData,
      oldUserData = this.props.userData;
    if (!nextProps.name && oldUserData && oldUserData.name) {
      this.props.navigation.navigate("Auth");
    }
  }
  render() {
    console.log(this.props);
    return (
      <View style={styles.container}>
        <Text style={{ textAlign: "center" }}>
          Welcome {this.props.userData.name}
        </Text>
        <Text style={{ textAlign: "center" }}>
          You are logged in as {this.props.userData.email}
        </Text>
        <Image
          source={{ uri: this.props.userData.uri }}
          style={{ width: 200, height: 200 }}
        />
        <Button title="Show me more of the app" onPress={this._showMoreApp} />
        <Button title="Actually, sign me out :)" onPress={this._signOutAsync} />
      </View>
    );
  }

  _showMoreApp = () => {
    this.props.navigation.navigate("Other");
  };

  _signOutAsync = async () => {
    this.props.resetUserDataInRedux();
    // await AsyncStorage.clear();
    // this.props.navigation.navigate("Auth");
  };
}

const mapStateToProps = state => {
  return {
    userData: state.userData
  };
};

const mapDispatchToProps = dispatch => {
  return {
    resetUserDataInRedux: () => {
      dispatch(userActions.set_user_data({}));
    }
  };
};

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(HomeScreen);
