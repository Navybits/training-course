App.js



import React from "react";
import {
  ActivityIndicator,
  AsyncStorage,
  Button,
  StatusBar,
  StyleSheet,
  View
} from "react-native";
import {
  createStackNavigator,
  createSwitchNavigator,
  createAppContainer
} from "react-navigation";
import SignUpScreen from "./screens/SignUpScreen";
import { Provider, connect } from "react-redux";
const Store = require("./redux/store").default();
let { store, persistor } = Store;
import { PersistGate } from "redux-persist/integration/react";
import "./database";
import styles from "./styles";
import HomeScreen from "./screens/ProfileScreen";

import SearchScreen from "./screens/SearchScreen";
import SearchQueriesHistory from "./screens/SearchQueriesHistory";
import SearchMoviesHistory from "./screens/SearchMoviesHistory";
class AuthLoadingScreen extends React.Component {
  constructor() {
    super();
    this._bootstrapAsync();
  }

  // Fetch the token from storage then navigate to our appropriate place
  _bootstrapAsync = async () => {
    const userToken = await AsyncStorage.getItem("userToken");

    // This will switch to the App screen or Auth screen and this loading
    // screen will be unmounted and thrown away.
    this.props.navigation.navigate(userToken ? "App" : "Auth");
  };

  // Render any loading content that you like here
  render() {
    return (
      <View style={styles.container}>
        <ActivityIndicator />
        <StatusBar barStyle="default" />
      </View>
    );
  }
}

const AppStack = createStackNavigator({
  Home: HomeScreen,
  Other: SearchScreen,
  QueryHistory: SearchQueriesHistory,
  MoviesHistory: SearchMoviesHistory
});
const AuthStack = createStackNavigator({ SignUp: SignUpScreen });

const APP = createAppContainer(
  createSwitchNavigator(
    {
      AuthLoading: AuthLoadingScreen,
      App: AppStack,
      Auth: AuthStack
    },
    {
      initialRouteName: "AuthLoading"
    }
  )
);

export default class App extends React.Component {
  render() {
    return (
      <Provider store={store}>
        <PersistGate loading={null} persistor={persistor}>
          <APP />
        </PersistGate>
      </Provider>
    );
  }
}



-------------------

Search Screen 

import React from "react";
import { View, StatusBar, Image, ScrollView } from "react-native";
import styles from "../styles";
import { TextInput } from "react-native-paper";
import { Avatar, Button, Card, Title, Paragraph } from "react-native-paper";
import db from "../database";
export default class SearchScreen extends React.Component {
  static navigationOptions = {
    title: "Search in movies"
  };
  state = {
    searchQuery: "",
    movies: []
  };
  componentDidMount() {
    db.transaction(tx => {
      tx.executeSql(
        "create table if not exists movies3 (id integer primary key not null, Title text,Year text,Poster text,Type text,imdbID text,searchQueryId integer);"
      );
      tx.executeSql(
        "create table if not exists search_queries (id integer primary key not null, query text);"
      );
      tx.executeSql("select * from movies3", [], (_, { rows: { _array } }) =>
        console.log({ movies: _array })
      );

      tx.executeSql("select * from search_queries", [], (_, { rows: { _array } }) =>
        console.log({ searchQueries: _array })
      );
    });
  }

  render() {
    return (
      <ScrollView>
        <View style={[styles.container, { justifyContent: "flex-start" }]}>
          <StatusBar barStyle="default" />
          <TextInput
            label="Search for movie"
            mode="outlined"
            style={styles.textInput}
            value={this.state.searchQuery}
            onChangeText={text => {
              this.setState({ searchQuery: text });
            }}
            onSubmitEditing={({
              nativeEvent: { text, eventCount, target }
            }) => {
              fetch(`http://www.omdbapi.com/?apikey=4ec0b62b&s=${text}`)
                .then(response => response.json())
                .then(responseJson => {
                  console.log({ responseJson });
                  let result = responseJson.Search;
                  if (!result || result.length == 0) return;
                  this.setState({
                    movies: result
                  });
                  db.transaction(tx => {
                    tx.executeSql(
                      "insert into search_queries (query) values (?)",
                      [text],
                      (_, { insertId }) => {
                        result.forEach(movie => {
                          tx.executeSql(
                            "insert into movies3 (Title,Year,Poster,Type,imdbID,searchQueryId) values (?, ?, ?, ?, ?,?)",
                            [
                              movie.Title,
                              movie.Year,
                              movie.Poster,
                              movie.Type,
                              movie.imdbID,
                              insertId
                            ],
                            console.log,
                            console.log
                          );
                        });
                      }
                    );

                    tx.executeSql(
                      "select * from movies3",
                      [],
                      (_, { rows: { _array } }) =>
                        console.log({ movies: _array })
                    );
                  });
                })
                .catch(error => {
                  console.error(error);
                });
              //
            }}
          />
          <View style={{ width: "100%" }}>
            {this.state.movies.map((movie, index) => (
              <Card
                key={`movie-list-item-${index}`}
                style={{ marginBottom: 20 }}
              >
                <Card.Content>
                  <Title>{movie.Title}</Title>
                  <Paragraph>Released On {movie.Year}</Paragraph>
                </Card.Content>
                <Card.Cover source={{ uri: movie.Poster }} />
              </Card>
            ))}
          </View>
        </View>
      </ScrollView>
    );
  }
}




---------
Signup screen

import React from "react";
import { View, Button, Text } from "react-native";
import { connect } from "react-redux";
import * as userActions from "../redux/actions/userData";
import styles from "../styles";
// import TextInput from "../components/TextInput";
import { TextInput } from "react-native-paper";
import ImagePickerExample from "../components/imagePicker";
import db from "../database";
class SignInScreen extends React.Component {
  static navigationOptions = {
    title: "Please sign in"
  };
  state = {
    name: ""
  };
  componentWillReceiveProps(nextProps) {
    let newUserData = nextProps.userData,
      oldUserData = this.props.userData;
    if (newUserData && newUserData.name) {
      this.props.navigation.navigate("App");
    }
  }
  componentDidMount() {
    let oldUserData = this.props.userData;
    if (oldUserData && oldUserData.name) {
      this.props.navigation.navigate("App");
    }
    db.transaction(tx => {
      tx.executeSql(
        "create table if not exists users (id integer primary key not null, email text, password text, name text, image text);"
      );
    });
    db.transaction(
      tx => {
        tx.executeSql("select * from users", [], (_, { rows }) => {
          // console.log({ rows, item: rows.item(0) });
        });
      },
      console.log,
      console.log
    );
  }
  render() {
    return (
      <View style={styles.container}>
        <ImagePickerExample onSelect={uri => this.setState({ uri })} />
        <TextInput
          label="Name"
          mode="outlined"
          style={styles.textInput}
          value={this.state.name}
          onChangeText={text => {
            this.setState({ name: text });
          }}
        />
        <TextInput
          label="Email"
          mode="outlined"
          style={styles.textInput}
          value={this.state.email}
          onChangeText={text => {
            this.setState({ email: text });
          }}
          keyboardType="email-address"
        />
        <TextInput
          label="Password"
          mode="outlined"
          secureTextEntry={true}
          style={styles.textInput}
          value={this.state.password}
          onChangeText={text => {
            this.setState({ password: text });
          }}
        />
        <Text>{this.props.userData.name}</Text>
        <Button title="Sign in!" onPress={this._signInAsync} />
      </View>
    );
  }

  _signInAsync = async () => {
    console.log("calling dispatch action", this.state);
    // await AsyncStorage.setItem("userToken", "abc");
    // this.props.navigation.navigate("App");
    let self = this;
    db.transaction(
      tx => {
        tx.executeSql(
          "insert into users (email, password, name, image) values (?, ?, ?, ?)",
          [
            this.state.email,
            this.state.password,
            this.state.name,
            this.state.uri
          ],
          (_, { insertId }) => {
            self.props.setUserDataInRedux(
              Object.assign({}, self.state, { id: insertId })
            );
          }
        );
        tx.executeSql("select * from users", [], (_, { rows }) =>
          console.log(JSON.stringify(rows))
        );
      },
      null,
      () => {
        console.log("success");
      }
    );
  };
}

const mapStateToProps = state => {
  return {
    userData: state.userData
  };
};

const mapDispatchToProps = dispatch => {
  return {
    setUserDataInRedux: data => {
      console.log("inside setUserDataInRedux");
      dispatch(userActions.set_user_data(data));
    }
  };
};

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(SignInScreen);

----------------
Profile screen

import React from "react";
import { View, Button, Text, Image } from "react-native";
import { connect } from "react-redux";
import styles from "../styles";
import TextInput from "../components/TextInput";
import * as userActions from "../redux/actions/userData";
import db from "../database";
class HomeScreen extends React.Component {
  static navigationOptions = {
    title: "Welcome to the app!"
  };
  state = {
    userData: {},
    movies: []
  };

  componentDidMount() {
    let self = this;
    db.transaction(
      tx => {
        tx.executeSql(
          "select * from users where email = ?",
          [this.props.userData.email],
          (_, { rows }) => {
            // console.log({ rows, item: rows.item(0) });
            self.setState({ userData: rows.item(0) });
          }
        );
      },
      console.log,
      console.log
    );
  }
  componentWillReceiveProps(nextProps) {
    let newUserData = nextProps.userData,
      oldUserData = this.props.userData;
    if (!nextProps.name && oldUserData && oldUserData.name) {
      this.props.navigation.navigate("Auth");
    }
  }
  render() {
    // console.log(this.state);
    return (
      <View style={styles.container}>
        {this.state.userData ? (
          <>
            <Text style={{ textAlign: "center" }}>
              Welcome {this.state.userData.name}
            </Text>
            <Text style={{ textAlign: "center" }}>
              You are logged in as {this.state.userData.email}
            </Text>
            <Image
              source={{ uri: this.state.userData.image }}
              style={{ width: 200, height: 200 }}
            />
          </>
        ) : null}
        {(this.state.movies || []).map((movie, index) => (
          <View
            key={index}
            style={{ flexDirection: "row", justifyContent: "space-between" }}
          >
            <Text style={{ fontSize: 20 }}>
              {movie.id}){movie.title}
            </Text>
            <Text>{":"}</Text>
            <Text style={{ fontSize: 18 }}>{movie.releaseYear}</Text>
          </View>
        ))}
        <Button title="Search in movies" onPress={this._showMoreApp} />
        <Button
          title="View search history"
          onPress={() => this.props.navigation.navigate("QueryHistory")}
        />
        <Button title="Actually, sign me out :)" onPress={this._signOutAsync} />
      </View>
    );
  }

  _showMoreApp = () => {
    this.props.navigation.navigate("Other");
  };

  _signOutAsync = async () => {
    let self = this;
    console.log(
      `removing my account ${this.props.userData.email} : ${
        this.props.userData.id
      }`
    );
    db.transaction(
      tx => {
        tx.executeSql(`delete from users where id=?;`, [
          this.props.userData.id
        ]);
      },
      console.log,
      () => {
        db.transaction(tx => {
          tx.executeSql("select * from users", [], (_, { rows }) => {
            // console.log(JSON.stringify(rows));
          });
        });
        self.props.resetUserDataInRedux();
      }
    );
    // await AsyncStorage.clear();
    // this.props.navigation.navigate("Auth");
  };
}

const mapStateToProps = state => {
  return {
    userData: state.userData
  };
};

const mapDispatchToProps = dispatch => {
  return {
    resetUserDataInRedux: () => {
      dispatch(userActions.set_user_data({}));
    }
  };
};

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(HomeScreen);



------------------

Search queries history 

import React from "react";

import { ScrollView, View, Text, Button } from "react-native";

import db from "../database";
// import { Button } from "react-native-paper";

export default class SearchQueriesHistory extends React.Component {
  state = {
    searchQueries: []
  };
  static navigationOptions = {
    title: "Search history"
  };
  componentDidMount() {
    db.transaction(tx => {
      tx.executeSql(
        "select * from search_queries order by id desc",
        [],
        (_, { rows: { _array } }) => {
          this.setState({ searchQueries: _array });
        },
        console.log
      );
    });
  }
  render() {
    let { searchQueries } = this.state;
    return (
      <ScrollView>
        {searchQueries.map((searchQuery, index) => (
          <View
            key={`search-query-${index}`}
            style={{
              padding: 10,
              borderBottomColor: "#ededed",
              borderBottomWidth: 1
            }}
          >
            <Button
              title={searchQuery.query}
              onPress={() =>
                this.props.navigation.navigate("MoviesHistory", { searchQuery })
              }
            />
          </View>
        ))}
      </ScrollView>
    );
  }
}


---------------
Search movies history 


import React from "react";
import { ScrollView, View } from "react-native";
import { Avatar, Button, Card, Title, Paragraph } from "react-native-paper";

import db from "../database";

export default class SearchMoviesHistory extends React.Component {
  state = {
    movies: []
  };
  static navigationOptions = {
    title: "Movies history"
  };
  componentDidMount() {
    let {
      navigation: {
        state: {
          params: { searchQuery }
        }
      }
    } = this.props;
    db.transaction(tx => {
      tx.executeSql(
        "select * from movies3 where searchQueryId = ?",
        [searchQuery.id],
        (_, { rows: { _array } }) => {
          this.setState({ movies: _array });
        },
        console.log
      );
    });
  }

  render() {
    console.log(this.state);
    return (
      <ScrollView>
        <View style={{ width: "100%" }}>
          {this.state.movies.map((movie, index) => (
            <Card key={`movie-list-item-${index}`} style={{ marginBottom: 20 }}>
              <Card.Content>
                <Title>{movie.Title}</Title>
                <Paragraph>Released On {movie.Year}</Paragraph>
              </Card.Content>
              <Card.Cover source={{ uri: movie.Poster }} />
            </Card>
          ))}
        </View>
      </ScrollView>
    );
  }
}
